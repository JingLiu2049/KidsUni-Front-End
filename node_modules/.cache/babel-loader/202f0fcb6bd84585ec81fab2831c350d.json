{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nvar _jsxFileName = \"D:\\\\My repository\\\\Self-projects\\\\Children Uni rebuilding\\\\KidsUni-Front-End\\\\src\\\\pages\\\\contents\\\\Events\\\\EventsList\\\\index.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Title',\n  dataIndex: 'title',\n  //   filters: [\n  //     {\n  //       text: 'Joe',\n  //       value: 'Joe',\n  //     },\n  //     {\n  //       text: 'Jim',\n  //       value: 'Jim',\n  //     },\n  //     {\n  //       text: 'Submenu',\n  //       value: 'Submenu',\n  //       children: [\n  //         {\n  //           text: 'Green',\n  //           value: 'Green',\n  //         },\n  //         {\n  //           text: 'Black',\n  //           value: 'Black',\n  //         },\n  //       ],\n  //     },\n  //   ],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  //   onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n  sortDirections: ['descend']\n}, {\n  title: 'Topic',\n  dataIndex: 'age',\n  defaultSortOrder: 'descend',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London'\n  }, {\n    text: 'New York',\n    value: 'New York'\n  }],\n  onFilter: (value, record) => record.address.indexOf(value) === 0\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}, {\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}];\nexport default function EventsList(props) {\n  function onChange(pagination, filters, sorter, extra) {\n    console.log('params', pagination, filters, sorter, extra);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Table, {\n    columns: columns,\n    dataSource: data,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n}\n_c = EventsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsList\");","map":{"version":3,"sources":["D:/My repository/Self-projects/Children Uni rebuilding/KidsUni-Front-End/src/pages/contents/Events/EventsList/index.jsx"],"names":["columns","title","dataIndex","sorter","a","b","name","length","sortDirections","defaultSortOrder","age","filters","text","value","onFilter","record","address","indexOf","data","key","EventsList","props","onChange","pagination","extra","console","log"],"mappings":"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","sourcesContent":["import { Table } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n      title: 'Title',\r\n      dataIndex: 'title',\r\n    //   filters: [\r\n    //     {\r\n    //       text: 'Joe',\r\n    //       value: 'Joe',\r\n    //     },\r\n    //     {\r\n    //       text: 'Jim',\r\n    //       value: 'Jim',\r\n    //     },\r\n    //     {\r\n    //       text: 'Submenu',\r\n    //       value: 'Submenu',\r\n    //       children: [\r\n    //         {\r\n    //           text: 'Green',\r\n    //           value: 'Green',\r\n    //         },\r\n    //         {\r\n    //           text: 'Black',\r\n    //           value: 'Black',\r\n    //         },\r\n    //       ],\r\n    //     },\r\n    //   ],\r\n      // specify the condition of filtering result\r\n      // here is that finding the name started with `value`\r\n    //   onFilter: (value, record) => record.name.indexOf(value) === 0,\r\n      sorter: (a, b) => a.name.length - b.name.length,\r\n      sortDirections: ['descend'],\r\n    },\r\n    {\r\n      title: 'Topic',\r\n      dataIndex: 'age',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => a.age - b.age,\r\n    },\r\n    {\r\n      title: 'Address',\r\n      dataIndex: 'address',\r\n      filters: [\r\n        {\r\n          text: 'London',\r\n          value: 'London',\r\n        },\r\n        {\r\n          text: 'New York',\r\n          value: 'New York',\r\n        },\r\n      ],\r\n      onFilter: (value, record) => record.address.indexOf(value) === 0,\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: '1',\r\n      name: 'John Brown',\r\n      age: 32,\r\n      address: 'New York No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '2',\r\n      name: 'Jim Green',\r\n      age: 42,\r\n      address: 'London No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '3',\r\n      name: 'Joe Black',\r\n      age: 32,\r\n      address: 'Sidney No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '4',\r\n      name: 'Jim Red',\r\n      age: 32,\r\n      address: 'London No. 2 Lake Park',\r\n    },\r\n    {\r\n      key: '1',\r\n      name: 'John Brown',\r\n      age: 32,\r\n      address: 'New York No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '2',\r\n      name: 'Jim Green',\r\n      age: 42,\r\n      address: 'London No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '3',\r\n      name: 'Joe Black',\r\n      age: 32,\r\n      address: 'Sidney No. 1 Lake Park',\r\n    },\r\n    {\r\n      key: '4',\r\n      name: 'Jim Red',\r\n      age: 32,\r\n      address: 'London No. 2 Lake Park',\r\n    },\r\n  ];\r\n\r\n\r\n\r\nexport default function EventsList(props){\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n      }\r\n    return(\r\n        <Table columns={columns} dataSource={data} onChange={onChange} />\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}